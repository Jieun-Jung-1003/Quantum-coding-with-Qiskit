{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit import *\n",
    "from qiskit import QuantumCircuit, execute, Aer\n",
    "from qiskit.visualization import plot_histogram\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 8\n",
    "n_q = n\n",
    "n_b = n\n",
    "qc_output = QuantumCircuit(n_q, n_b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "for j in range(n):\n",
    "    qc_output.measure(j,j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">     ┌─┐                     \n",
       "q_0: ┤M├─────────────────────\n",
       "     └╥┘┌─┐                  \n",
       "q_1: ─╫─┤M├──────────────────\n",
       "      ║ └╥┘┌─┐               \n",
       "q_2: ─╫──╫─┤M├───────────────\n",
       "      ║  ║ └╥┘┌─┐            \n",
       "q_3: ─╫──╫──╫─┤M├────────────\n",
       "      ║  ║  ║ └╥┘┌─┐         \n",
       "q_4: ─╫──╫──╫──╫─┤M├─────────\n",
       "      ║  ║  ║  ║ └╥┘┌─┐      \n",
       "q_5: ─╫──╫──╫──╫──╫─┤M├──────\n",
       "      ║  ║  ║  ║  ║ └╥┘┌─┐   \n",
       "q_6: ─╫──╫──╫──╫──╫──╫─┤M├───\n",
       "      ║  ║  ║  ║  ║  ║ └╥┘┌─┐\n",
       "q_7: ─╫──╫──╫──╫──╫──╫──╫─┤M├\n",
       "      ║  ║  ║  ║  ║  ║  ║ └╥┘\n",
       "c_0: ═╩══╬══╬══╬══╬══╬══╬══╬═\n",
       "         ║  ║  ║  ║  ║  ║  ║ \n",
       "c_1: ════╩══╬══╬══╬══╬══╬══╬═\n",
       "            ║  ║  ║  ║  ║  ║ \n",
       "c_2: ═══════╩══╬══╬══╬══╬══╬═\n",
       "               ║  ║  ║  ║  ║ \n",
       "c_3: ══════════╩══╬══╬══╬══╬═\n",
       "                  ║  ║  ║  ║ \n",
       "c_4: ═════════════╩══╬══╬══╬═\n",
       "                     ║  ║  ║ \n",
       "c_5: ════════════════╩══╬══╬═\n",
       "                        ║  ║ \n",
       "c_6: ═══════════════════╩══╬═\n",
       "                           ║ \n",
       "c_7: ══════════════════════╩═\n",
       "                             </pre>"
      ],
      "text/plain": [
       "     ┌─┐                     \n",
       "q_0: ┤M├─────────────────────\n",
       "     └╥┘┌─┐                  \n",
       "q_1: ─╫─┤M├──────────────────\n",
       "      ║ └╥┘┌─┐               \n",
       "q_2: ─╫──╫─┤M├───────────────\n",
       "      ║  ║ └╥┘┌─┐            \n",
       "q_3: ─╫──╫──╫─┤M├────────────\n",
       "      ║  ║  ║ └╥┘┌─┐         \n",
       "q_4: ─╫──╫──╫──╫─┤M├─────────\n",
       "      ║  ║  ║  ║ └╥┘┌─┐      \n",
       "q_5: ─╫──╫──╫──╫──╫─┤M├──────\n",
       "      ║  ║  ║  ║  ║ └╥┘┌─┐   \n",
       "q_6: ─╫──╫──╫──╫──╫──╫─┤M├───\n",
       "      ║  ║  ║  ║  ║  ║ └╥┘┌─┐\n",
       "q_7: ─╫──╫──╫──╫──╫──╫──╫─┤M├\n",
       "      ║  ║  ║  ║  ║  ║  ║ └╥┘\n",
       "c_0: ═╩══╬══╬══╬══╬══╬══╬══╬═\n",
       "         ║  ║  ║  ║  ║  ║  ║ \n",
       "c_1: ════╩══╬══╬══╬══╬══╬══╬═\n",
       "            ║  ║  ║  ║  ║  ║ \n",
       "c_2: ═══════╩══╬══╬══╬══╬══╬═\n",
       "               ║  ║  ║  ║  ║ \n",
       "c_3: ══════════╩══╬══╬══╬══╬═\n",
       "                  ║  ║  ║  ║ \n",
       "c_4: ═════════════╩══╬══╬══╬═\n",
       "                     ║  ║  ║ \n",
       "c_5: ════════════════╩══╬══╬═\n",
       "                        ║  ║ \n",
       "c_6: ═══════════════════╩══╬═\n",
       "                           ║ \n",
       "c_7: ══════════════════════╩═\n",
       "                             "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc_output.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts = execute(qc_output, Aer.get_backend('qasm_simulator')).result().get_counts()\n",
    "plot_histogram(counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: Creating an Adder Circuit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">          \n",
       "q_0: ─────\n",
       "          \n",
       "q_1: ─────\n",
       "          \n",
       "q_2: ─────\n",
       "          \n",
       "q_3: ─────\n",
       "          \n",
       "q_4: ─────\n",
       "          \n",
       "q_5: ─────\n",
       "          \n",
       "q_6: ─────\n",
       "     ┌───┐\n",
       "q_7: ┤ X ├\n",
       "     └───┘</pre>"
      ],
      "text/plain": [
       "          \n",
       "q_0: ─────\n",
       "          \n",
       "q_1: ─────\n",
       "          \n",
       "q_2: ─────\n",
       "          \n",
       "q_3: ─────\n",
       "          \n",
       "q_4: ─────\n",
       "          \n",
       "q_5: ─────\n",
       "          \n",
       "q_6: ─────\n",
       "     ┌───┐\n",
       "q_7: ┤ X ├\n",
       "     └───┘"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc_encode = QuantumCircuit(n)\n",
    "qc_encode.x(7)\n",
    "\n",
    "qc_encode.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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zz7TmTNnFBkZqddee02hoaEWpwfKhqenpxYvXqyePXsqMzNT48eP16uvvnrZ7fedTqf279+v/fv3a+bMmXrwwQf1yiuvKDY2VpK0cuVKCguAP4yZloumTJmibt265ReWPE2bNpWnp6fCw8OVnZ2tpk2b6quvvtLRo0d1++23q2/fvhYlBsre5MmT1bNnTx05ckR/+tOf9Morr7j094J27typnJyc/H8fP36cwgLgD6O0SDp06JD27NmjuLi4yx5LS0tTWFiYvL29VblyZT3xxBMKDAyUu7u7Ro8erd27d+vs2bMWpAbKVnR0tB577DHl5OTozjvv1I4dO1zaLu8clurVq2vNmjXKysrSwIED1aNHjzJODOBaR2lRbmmRpDp16hRanpWVpeTk5CLPZ9m0aZMaN24sHx+fUstis9kYf2AU3I8m7dOKkPtSTz/9tNzc3DR9+nRt3rzZpa/fgifdLl++XN27d9cTTzwhSXrmmWf4emcwGFccrqK0SAoICJAkpaamFlo+bdo0paenKzIy8rJtjh8/rlGjRmny5MnlkhEoT8HBwercubMyMzM1depUl7a5tLDkncPy6quv6vDhw2rVqpXat29fxskBXMsoLZKCgoJkt9uVmJiouXPnas2aNUpISNA777wjSZfNtGRlZalXr17q27ev7r///lLN4nQ6GX9gFNyPJu3TipC7oLxDOYsWLdKJEydK/LotqrBI0vnz5zV37txCz2vS/w2DwSj74SpKiyQ3NzctXLhQYWFhSkhI0ODBgxUQEKBRo0bJw8NDdrs9f93s7Gzdd999Cg4OZpYF16y8or5x48YS1y2usOTJex5uHQDgj+CS54tCQkK0bt26QssGDhyo0NBQ+fr65i8bNmyYHA6HZs+eXd4RgXLTpEkTSdLevXuLXc+VwlLweYKCgko/LIDrBqWlGCkpKYqOjs7/948//qg5c+bIx8en0K3I9+7dq4YNG1oRESgTCQkJCggI0O7du4td78EHH3TpxnFpaWnq3LmzTp48WRZxAVwnKC1FyMjIUGpqqkaOHJm/rFGjRld17A0w1c6dO11ab8yYMfrmm2/05ptvFnsflqysLK1evbq04gG4TlFaiuDn51fo5lgALud0OvX6669bHQPAdYITcQEAgBEoLQAAwAiUFgAAYARKCwAAMAKlBQAAGIHSAgAAjEBpAQAARqC0AAAAI3BzOQCSdNV3ex4/Nffvbz07Lr7QxwBQVphpAQAARqC0AAAAI1BaAACAESgtAADACJQWAABgBEoLAAAwAqUFAAAYgdICAACMQGkBAABGoLQAAAAjUFoAAIARKC0AAMAIlBYAAGAESgsAADACpQUAABjBw+oAAPB72Ww2S17X6XRa8rrA9Y6ZFgAAYARKCwAAMAKlBQAAGIHSAgAAjEBpAQAARqC0AAAAI3DJM4DrQu3atdWhQwdFRUWpbt26cjqd+uWXX7R161Zt2LBBv/7662XbxMbGatKkSerVq5eOHTtmQWoABVFaAFzT2rZtq7/97W+666675OFx5be87OxsLV26VNOnT9eWLVsk5RaWlStXqlKlShoxYoQSExPLMzaAK6C0FOBwOPT8889r1qxZOnjwoJo1a6aXX35Z8fHxiomJ0ezZs62OCMBFPj4+SkxM1F//+le5ubnpwoUL+uSTT7Rlyxb98MMPkqQbb7xRbdu21W233aa4uDjde++9ev7557V69WotWbJElSpV0ltvvaUpU6ZY/NkAkCgthQwZMkRLly7VxIkTFRUVpU2bNql///46fPiwxowZY3U8AC6qUqWKVq1apQ4dOig7O1szZszQiy++qPT09CuuX69ePT366KN69NFHNXbsWD366KNyd3fXW2+9pfj4eO6AC1QQlJaL5s+frzlz5igpKUkxMTGScqeHt23bpiVLligqKkqSNGDAAK1evVpnz55Vs2bN9NJLL6ldu3ZWRgdQgJubm5YvX64OHTooLS1N99xzj7Zu3VrsNj///LP+9re/6fvvv9err74qd3d3/fTTTxoxYgSFBahAuHrooilTpqhbt275hSVP06ZN5enpqfDwcEnShAkTdPDgQZ08eVJPPfWU7r33XiviAijCY489ptjYWP3888+KiYkpsbDkiY2N1YwZM+Tm5qbMzEwFBgbqL3/5SxmnBXA1KC2SDh06pD179iguLu6yx9LS0hQWFiZvb29JUosWLeTl5SWn0ylPT0/98ssvOnv2bKllsdlsjD8wCu5Hk/apibkrQuZL1atXT08//bQkafDgwTpw4IBL33cFT7p96623dN9990mSJk+erDp16vB9ymCU8XAVpUW5pUXSZW9OWVlZSk5Ozj80lGfAgAHy9fVV165dNXLkSPn4+JRbVgBFi4+Pl4+PjxYtWqRPP/3U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\n",
      "text/plain": [
       "<Figure size 719.992x565.88 with 1 Axes>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = qc_encode + qc_output\n",
    "qc.draw(output='mpl', justify='none')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">           \n",
       " q_0: ─────\n",
       "      ┌───┐\n",
       " q_1: ┤ X ├\n",
       "      └───┘\n",
       " q_2: ─────\n",
       "           \n",
       " q_3: ─────\n",
       "           \n",
       " q_4: ─────\n",
       "      ┌───┐\n",
       " q_5: ┤ X ├\n",
       "      └───┘\n",
       " q_6: ─────\n",
       "           \n",
       " q_7: ─────\n",
       "           \n",
       " q_8: ─────\n",
       "           \n",
       " q_9: ─────\n",
       "           \n",
       "q_10: ─────\n",
       "           \n",
       "q_11: ─────\n",
       "           \n",
       "q_12: ─────\n",
       "           \n",
       "q_13: ─────\n",
       "           \n",
       "q_14: ─────\n",
       "           \n",
       "q_15: ─────\n",
       "           \n",
       "q_16: ─────\n",
       "           \n",
       "q_17: ─────\n",
       "           \n",
       "q_18: ─────\n",
       "           \n",
       "q_19: ─────\n",
       "           \n",
       "q_20: ─────\n",
       "           \n",
       "q_21: ─────\n",
       "           \n",
       "q_22: ─────\n",
       "           \n",
       "q_23: ─────\n",
       "           \n",
       "q_24: ─────\n",
       "           \n",
       "q_25: ─────\n",
       "           \n",
       "q_26: ─────\n",
       "           \n",
       "q_27: ─────\n",
       "           \n",
       "q_28: ─────\n",
       "           \n",
       "q_29: ─────\n",
       "           \n",
       "q_30: ─────\n",
       "           \n",
       "q_31: ─────\n",
       "           \n",
       "q_32: ─────\n",
       "           \n",
       "q_33: ─────\n",
       "           \n",
       "q_34: ─────\n",
       "           \n",
       "q_35: ─────\n",
       "           \n",
       "q_36: ─────\n",
       "           \n",
       "q_37: ─────\n",
       "           \n",
       "q_38: ─────\n",
       "           \n",
       "q_39: ─────\n",
       "           </pre>"
      ],
      "text/plain": [
       "           \n",
       " q_0: ─────\n",
       "      ┌───┐\n",
       " q_1: ┤ X ├\n",
       "      └───┘\n",
       " q_2: ─────\n",
       "           \n",
       " q_3: ─────\n",
       "           \n",
       " q_4: ─────\n",
       "      ┌───┐\n",
       " q_5: ┤ X ├\n",
       "      └───┘\n",
       " q_6: ─────\n",
       "           \n",
       " q_7: ─────\n",
       "           \n",
       " q_8: ─────\n",
       "           \n",
       " q_9: ─────\n",
       "           \n",
       "q_10: ─────\n",
       "           \n",
       "q_11: ─────\n",
       "           \n",
       "q_12: ─────\n",
       "           \n",
       "q_13: ─────\n",
       "           \n",
       "q_14: ─────\n",
       "           \n",
       "q_15: ─────\n",
       "           \n",
       "q_16: ─────\n",
       "           \n",
       "q_17: ─────\n",
       "           \n",
       "q_18: ─────\n",
       "           \n",
       "q_19: ─────\n",
       "           \n",
       "q_20: ─────\n",
       "           \n",
       "q_21: ─────\n",
       "           \n",
       "q_22: ─────\n",
       "           \n",
       "q_23: ─────\n",
       "           \n",
       "q_24: ─────\n",
       "           \n",
       "q_25: ─────\n",
       "           \n",
       "q_26: ─────\n",
       "           \n",
       "q_27: ─────\n",
       "           \n",
       "q_28: ─────\n",
       "           \n",
       "q_29: ─────\n",
       "           \n",
       "q_30: ─────\n",
       "           \n",
       "q_31: ─────\n",
       "           \n",
       "q_32: ─────\n",
       "           \n",
       "q_33: ─────\n",
       "           \n",
       "q_34: ─────\n",
       "           \n",
       "q_35: ─────\n",
       "           \n",
       "q_36: ─────\n",
       "           \n",
       "q_37: ─────\n",
       "           \n",
       "q_38: ─────\n",
       "           \n",
       "q_39: ─────\n",
       "           "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc_encode = QuantumCircuit(40)\n",
    "qc_encode.x(1)\n",
    "qc_encode.x(5)\n",
    "\n",
    "qc_encode.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">          \n",
       "q_0: ──■──\n",
       "     ┌─┴─┐\n",
       "q_1: ┤ X ├\n",
       "     └───┘</pre>"
      ],
      "text/plain": [
       "          \n",
       "q_0: ──■──\n",
       "     ┌─┴─┐\n",
       "q_1: ┤ X ├\n",
       "     └───┘"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc_cnot = QuantumCircuit(2)\n",
    "qc_cnot.cx(0,1)\n",
    "qc_cnot.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">     ┌───┐     ┌─┐   \n",
       "q_0: ┤ X ├──■──┤M├───\n",
       "     └───┘┌─┴─┐└╥┘┌─┐\n",
       "q_1: ─────┤ X ├─╫─┤M├\n",
       "          └───┘ ║ └╥┘\n",
       "c_0: ═══════════╩══╬═\n",
       "                   ║ \n",
       "c_1: ══════════════╩═\n",
       "                     </pre>"
      ],
      "text/plain": [
       "     ┌───┐     ┌─┐   \n",
       "q_0: ┤ X ├──■──┤M├───\n",
       "     └───┘┌─┴─┐└╥┘┌─┐\n",
       "q_1: ─────┤ X ├─╫─┤M├\n",
       "          └───┘ ║ └╥┘\n",
       "c_0: ═══════════╩══╬═\n",
       "                   ║ \n",
       "c_1: ══════════════╩═\n",
       "                     "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = QuantumCircuit(2,2)\n",
    "qc.x(0)\n",
    "qc.cx(0,1)\n",
    "qc.measure(0,0)\n",
    "qc.measure(1,1)\n",
    "qc.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">     ┌───┐ ░            ░       \n",
       "q_0: ┤ X ├─░───■────────░───────\n",
       "     └───┘ ░   │        ░       \n",
       "q_1: ──────░───┼────■───░───────\n",
       "           ░ ┌─┴─┐┌─┴─┐ ░ ┌─┐   \n",
       "q_2: ──────░─┤ X ├┤ X ├─░─┤M├───\n",
       "           ░ └───┘└───┘ ░ └╥┘┌─┐\n",
       "q_3: ──────░────────────░──╫─┤M├\n",
       "           ░            ░  ║ └╥┘\n",
       "c_0: ══════════════════════╩══╬═\n",
       "                              ║ \n",
       "c_1: ═════════════════════════╩═\n",
       "                                </pre>"
      ],
      "text/plain": [
       "     ┌───┐ ░            ░       \n",
       "q_0: ┤ X ├─░───■────────░───────\n",
       "     └───┘ ░   │        ░       \n",
       "q_1: ──────░───┼────■───░───────\n",
       "           ░ ┌─┴─┐┌─┴─┐ ░ ┌─┐   \n",
       "q_2: ──────░─┤ X ├┤ X ├─░─┤M├───\n",
       "           ░ └───┘└───┘ ░ └╥┘┌─┐\n",
       "q_3: ──────░────────────░──╫─┤M├\n",
       "           ░            ░  ║ └╥┘\n",
       "c_0: ══════════════════════╩══╬═\n",
       "                              ║ \n",
       "c_1: ═════════════════════════╩═\n",
       "                                "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc_ha = QuantumCircuit(4,2)\n",
    "qc_ha.x(0)\n",
    "qc_ha.barrier()\n",
    "\n",
    "qc_ha.cx(0,2)\n",
    "qc_ha.cx(1,2)\n",
    "qc_ha.barrier()\n",
    "\n",
    "qc_ha.measure(2,0)\n",
    "qc_ha.measure(3,1)\n",
    "\n",
    "qc_ha.draw()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">     ┌───┐ ░                 ░       \n",
       "q_0: ┤ X ├─░───■─────────■───░───────\n",
       "     ├───┤ ░   │         │   ░       \n",
       "q_1: ┤ X ├─░───┼────■────■───░───────\n",
       "     └───┘ ░ ┌─┴─┐┌─┴─┐  │   ░ ┌─┐   \n",
       "q_2: ──────░─┤ X ├┤ X ├──┼───░─┤M├───\n",
       "           ░ └───┘└───┘┌─┴─┐ ░ └╥┘┌─┐\n",
       "q_3: ──────░───────────┤ X ├─░──╫─┤M├\n",
       "           ░           └───┘ ░  ║ └╥┘\n",
       "c_0: ═══════════════════════════╩══╬═\n",
       "                                   ║ \n",
       "c_1: ══════════════════════════════╩═\n",
       "                                     </pre>"
      ],
      "text/plain": [
       "     ┌───┐ ░                 ░       \n",
       "q_0: ┤ X ├─░───■─────────■───░───────\n",
       "     ├───┤ ░   │         │   ░       \n",
       "q_1: ┤ X ├─░───┼────■────■───░───────\n",
       "     └───┘ ░ ┌─┴─┐┌─┴─┐  │   ░ ┌─┐   \n",
       "q_2: ──────░─┤ X ├┤ X ├──┼───░─┤M├───\n",
       "           ░ └───┘└───┘┌─┴─┐ ░ └╥┘┌─┐\n",
       "q_3: ──────░───────────┤ X ├─░──╫─┤M├\n",
       "           ░           └───┘ ░  ║ └╥┘\n",
       "c_0: ═══════════════════════════╩══╬═\n",
       "                                   ║ \n",
       "c_1: ══════════════════════════════╩═\n",
       "                                     "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc_ha = QuantumCircuit(4,2)\n",
    "\n",
    "# encode inputs in qubits 0 and 1\n",
    "qc_ha.x(0) # For a=0, remove the this line. For a=1, leave it.\n",
    "qc_ha.x(1) # For b=0, remove the this line. For b=1, leave it.\n",
    "##so we are calculating 1+1.\n",
    "qc_ha.barrier()\n",
    "\n",
    "# use cnots to write the XOR of the inputs on qubit 2\n",
    "qc_ha.cx(0,2)\n",
    "qc_ha.cx(1,2)\n",
    "\n",
    "# use ccx to write the AND of the inputs on qubit 3\n",
    "qc_ha.ccx(0,1,3)\n",
    "qc_ha.barrier()\n",
    "\n",
    "# extract outputs\n",
    "qc_ha.measure(2,0) # extract XOR value\n",
    "qc_ha.measure(3,1) # extract AND value\n",
    "\n",
    "qc_ha.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts = execute(qc_ha,Aer.get_backend('qasm_simulator')).result().get_counts()\n",
    "plot_histogram(counts)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
